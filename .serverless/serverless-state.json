{
  "service": {
    "service": "trvy-python-websocket",
    "serviceObject": {
      "name": "trvy-python-websocket"
    },
    "provider": {
      "stage": "dev",
      "variableSyntax": "\\${([^{}]+?)}",
      "name": "aws",
      "runtime": "python3.7",
      "region": "us-east-2",
      "websocketsApiName": "fwsl-websocket-api",
      "websocketsApiRouteSelectionExpression": "$request.body.action",
      "environment": {
        "tableName": "fwsl-questions"
      },
      "iamRoleStatements": [
        {
          "Effect": "Allow",
          "Action": [
            "execute-api:ManageConnections"
          ],
          "Resource": [
            "arn:aws:execute-api:*:*:**/@connections/*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "dynamodb:DescribeTable",
            "dynamodb:Query",
            "dynamodb:Scan",
            "dynamodb:GetItem",
            "dynamodb:PutItem",
            "dynamodb:UpdateItem",
            "dynamodb:DeleteItem"
          ],
          "Resource": "arn:aws:dynamodb:us-east-2:*:*"
        }
      ],
      "versionFunctions": true,
      "remoteFunctionData": null,
      "compiledCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }
            }
          },
          "ServerlessDeploymentBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
              "Bucket": {
                "Ref": "ServerlessDeploymentBucket"
              },
              "PolicyDocument": {
                "Statement": [
                  {
                    "Action": "s3:*",
                    "Effect": "Deny",
                    "Principal": "*",
                    "Resource": [
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            },
                            "/*"
                          ]
                        ]
                      }
                    ],
                    "Condition": {
                      "Bool": {
                        "aws:SecureTransport": false
                      }
                    }
                  }
                ]
              }
            }
          },
          "ConnectionManagerLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/trvy-python-websocket-dev-connectionManager"
            }
          },
          "DefaultMessageLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/trvy-python-websocket-dev-defaultMessage"
            }
          },
          "AskQuestionLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/trvy-python-websocket-dev-askQuestion"
            }
          },
          "SetAnswererLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/trvy-python-websocket-dev-setAnswerer"
            }
          },
          "GetPotentialAnswerersLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/trvy-python-websocket-dev-getPotentialAnswerers"
            }
          },
          "CreateQuestionLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/trvy-python-websocket-dev-createQuestion"
            }
          },
          "UpdateUserInfoLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/trvy-python-websocket-dev-updateUserInfo"
            }
          },
          "CreateLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/trvy-python-websocket-dev-create"
            }
          },
          "ListLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/trvy-python-websocket-dev-list"
            }
          },
          "UpdateLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/trvy-python-websocket-dev-update"
            }
          },
          "GetLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/trvy-python-websocket-dev-get"
            }
          },
          "DeleteLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/trvy-python-websocket-dev-delete"
            }
          },
          "IamRoleLambdaExecution": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "lambda.amazonaws.com"
                      ]
                    },
                    "Action": [
                      "sts:AssumeRole"
                    ]
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": {
                    "Fn::Join": [
                      "-",
                      [
                        "trvy-python-websocket",
                        "dev",
                        "lambda"
                      ]
                    ]
                  },
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:CreateLogStream",
                          "logs:CreateLogGroup"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/trvy-python-websocket-dev*:*"
                          }
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:PutLogEvents"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/trvy-python-websocket-dev*:*:*"
                          }
                        ]
                      },
                      {
                        "$ref": "$[\"service\"][\"provider\"][\"iamRoleStatements\"][0]"
                      },
                      {
                        "$ref": "$[\"service\"][\"provider\"][\"iamRoleStatements\"][1]"
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "execute-api:ManageConnections"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:execute-api:*:*:*/@connections/*"
                          }
                        ]
                      }
                    ]
                  }
                }
              ],
              "Path": "/",
              "RoleName": {
                "Fn::Join": [
                  "-",
                  [
                    "trvy-python-websocket",
                    "dev",
                    {
                      "Ref": "AWS::Region"
                    },
                    "lambdaRole"
                  ]
                ]
              }
            }
          },
          "ConnectionManagerLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/trvy-python-websocket/dev/1593214795399-2020-06-26T23:39:55.399Z/connectionManager.zip"
              },
              "FunctionName": "trvy-python-websocket-dev-connectionManager",
              "Handler": "websocket.connection_manager",
              "MemorySize": 1024,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "Runtime": "python3.7",
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "tableName": "fwsl-questions"
                }
              }
            },
            "DependsOn": [
              "ConnectionManagerLogGroup"
            ]
          },
          "ConnectionManagerLambdaVersiongj8642mlQtv9kxWfSwO5X0pIyxXRmDDDR6AFob54V5o": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "ConnectionManagerLambdaFunction"
              },
              "CodeSha256": "J0rYwAlyWeoZfwW8EjmR6uIq9PncjyfBhncW4m84tfU="
            }
          },
          "DefaultMessageLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/trvy-python-websocket/dev/1593214795399-2020-06-26T23:39:55.399Z/defaultMessage.zip"
              },
              "FunctionName": "trvy-python-websocket-dev-defaultMessage",
              "Handler": "websocket.default_message",
              "MemorySize": 1024,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "Runtime": "python3.7",
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "tableName": "fwsl-questions"
                }
              }
            },
            "DependsOn": [
              "DefaultMessageLogGroup"
            ]
          },
          "DefaultMessageLambdaVersionmLkrEnfTZuPirRgADFVwdK67IkWIRaUGIQpX9Hb22YI": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "DefaultMessageLambdaFunction"
              },
              "CodeSha256": "J0rYwAlyWeoZfwW8EjmR6uIq9PncjyfBhncW4m84tfU="
            }
          },
          "AskQuestionLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/trvy-python-websocket/dev/1593214795399-2020-06-26T23:39:55.399Z/askQuestion.zip"
              },
              "FunctionName": "trvy-python-websocket-dev-askQuestion",
              "Handler": "websocket.send_question_to_room",
              "MemorySize": 1024,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "Runtime": "python3.7",
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "tableName": "fwsl-questions"
                }
              }
            },
            "DependsOn": [
              "AskQuestionLogGroup"
            ]
          },
          "AskQuestionLambdaVersionxRQWlt1MkIqBLCWjLSecG8e95GLjnxjeWyMSHNXDPQ": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "AskQuestionLambdaFunction"
              },
              "CodeSha256": "J0rYwAlyWeoZfwW8EjmR6uIq9PncjyfBhncW4m84tfU="
            }
          },
          "SetAnswererLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/trvy-python-websocket/dev/1593214795399-2020-06-26T23:39:55.399Z/setAnswerer.zip"
              },
              "FunctionName": "trvy-python-websocket-dev-setAnswerer",
              "Handler": "websocket.set_answerer",
              "MemorySize": 1024,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "Runtime": "python3.7",
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "tableName": "fwsl-questions"
                }
              }
            },
            "DependsOn": [
              "SetAnswererLogGroup"
            ]
          },
          "SetAnswererLambdaVersionnxc1HMiQfB8nfwx94DS6BoNct83nGOd05zBNDs9G9vo": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "SetAnswererLambdaFunction"
              },
              "CodeSha256": "J0rYwAlyWeoZfwW8EjmR6uIq9PncjyfBhncW4m84tfU="
            }
          },
          "GetPotentialAnswerersLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/trvy-python-websocket/dev/1593214795399-2020-06-26T23:39:55.399Z/getPotentialAnswerers.zip"
              },
              "FunctionName": "trvy-python-websocket-dev-getPotentialAnswerers",
              "Handler": "websocket.send_next_answerers",
              "MemorySize": 1024,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "Runtime": "python3.7",
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "tableName": "fwsl-questions"
                }
              }
            },
            "DependsOn": [
              "GetPotentialAnswerersLogGroup"
            ]
          },
          "GetPotentialAnswerersLambdaVersionqqpzd9cK1RkuMpesT3EgLrOxV7RqVLCIlnvNRBWDDc": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetPotentialAnswerersLambdaFunction"
              },
              "CodeSha256": "J0rYwAlyWeoZfwW8EjmR6uIq9PncjyfBhncW4m84tfU="
            }
          },
          "CreateQuestionLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/trvy-python-websocket/dev/1593214795399-2020-06-26T23:39:55.399Z/createQuestion.zip"
              },
              "FunctionName": "trvy-python-websocket-dev-createQuestion",
              "Handler": "websocket.store_question",
              "MemorySize": 1024,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "Runtime": "python3.7",
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "tableName": "fwsl-questions"
                }
              }
            },
            "DependsOn": [
              "CreateQuestionLogGroup"
            ]
          },
          "CreateQuestionLambdaVersionW6d7mPBD3slxIxBnmnMBXYn9ZgOSKCsmFmLe10wiV0": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "CreateQuestionLambdaFunction"
              },
              "CodeSha256": "J0rYwAlyWeoZfwW8EjmR6uIq9PncjyfBhncW4m84tfU="
            }
          },
          "UpdateUserInfoLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/trvy-python-websocket/dev/1593214795399-2020-06-26T23:39:55.399Z/updateUserInfo.zip"
              },
              "FunctionName": "trvy-python-websocket-dev-updateUserInfo",
              "Handler": "websocket.update_user",
              "MemorySize": 1024,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "Runtime": "python3.7",
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "tableName": "fwsl-questions"
                }
              }
            },
            "DependsOn": [
              "UpdateUserInfoLogGroup"
            ]
          },
          "UpdateUserInfoLambdaVersionpJCFMVUGQzKSqhEgXCj8NmnCgQirdvDgGlIVEDraQM": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "UpdateUserInfoLambdaFunction"
              },
              "CodeSha256": "J0rYwAlyWeoZfwW8EjmR6uIq9PncjyfBhncW4m84tfU="
            }
          },
          "CreateLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/trvy-python-websocket/dev/1593214795399-2020-06-26T23:39:55.399Z/create.zip"
              },
              "FunctionName": "trvy-python-websocket-dev-create",
              "Handler": "create.main",
              "MemorySize": 1024,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "Runtime": "python3.7",
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "tableName": "fwsl-questions"
                }
              }
            },
            "DependsOn": [
              "CreateLogGroup"
            ]
          },
          "CreateLambdaVersionjHKRtfN4yFgwtwctT9hm3Lw2nyhXDbGdLKN1V852oAY": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "CreateLambdaFunction"
              },
              "CodeSha256": "J0rYwAlyWeoZfwW8EjmR6uIq9PncjyfBhncW4m84tfU="
            }
          },
          "ListLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/trvy-python-websocket/dev/1593214795399-2020-06-26T23:39:55.399Z/list.zip"
              },
              "FunctionName": "trvy-python-websocket-dev-list",
              "Handler": "list.main",
              "MemorySize": 1024,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "Runtime": "python3.7",
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "tableName": "fwsl-questions"
                }
              }
            },
            "DependsOn": [
              "ListLogGroup"
            ]
          },
          "ListLambdaVersion0sUIjM32xHEdSHseEheBlezTWWblgjK1AUvnHBgyI": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "ListLambdaFunction"
              },
              "CodeSha256": "J0rYwAlyWeoZfwW8EjmR6uIq9PncjyfBhncW4m84tfU="
            }
          },
          "UpdateLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/trvy-python-websocket/dev/1593214795399-2020-06-26T23:39:55.399Z/update.zip"
              },
              "FunctionName": "trvy-python-websocket-dev-update",
              "Handler": "update.main",
              "MemorySize": 1024,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "Runtime": "python3.7",
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "tableName": "fwsl-questions"
                }
              }
            },
            "DependsOn": [
              "UpdateLogGroup"
            ]
          },
          "UpdateLambdaVersion478yuIzhT5nzyj1O7gBwnM98O2cB6H81u0cl9IlGc": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "UpdateLambdaFunction"
              },
              "CodeSha256": "J0rYwAlyWeoZfwW8EjmR6uIq9PncjyfBhncW4m84tfU="
            }
          },
          "GetLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/trvy-python-websocket/dev/1593214795399-2020-06-26T23:39:55.399Z/get.zip"
              },
              "FunctionName": "trvy-python-websocket-dev-get",
              "Handler": "get.main",
              "MemorySize": 1024,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "Runtime": "python3.7",
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "tableName": "fwsl-questions"
                }
              }
            },
            "DependsOn": [
              "GetLogGroup"
            ]
          },
          "GetLambdaVersionZxyuXnJDr6C8hMtAKbeMhqfbf8NbwjrUpslHBGmL1A": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetLambdaFunction"
              },
              "CodeSha256": "J0rYwAlyWeoZfwW8EjmR6uIq9PncjyfBhncW4m84tfU="
            }
          },
          "DeleteLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/trvy-python-websocket/dev/1593214795399-2020-06-26T23:39:55.399Z/delete.zip"
              },
              "FunctionName": "trvy-python-websocket-dev-delete",
              "Handler": "delete.main",
              "MemorySize": 1024,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "Runtime": "python3.7",
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "tableName": "fwsl-questions"
                }
              }
            },
            "DependsOn": [
              "DeleteLogGroup"
            ]
          },
          "DeleteLambdaVersionA6Ij2TWUpaT6P0gUUJaMgMJa4bcOZpqubKvIuPmuM": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "DeleteLambdaFunction"
              },
              "CodeSha256": "J0rYwAlyWeoZfwW8EjmR6uIq9PncjyfBhncW4m84tfU="
            }
          },
          "ApiGatewayRestApi": {
            "Type": "AWS::ApiGateway::RestApi",
            "Properties": {
              "Name": "dev-trvy-python-websocket",
              "EndpointConfiguration": {
                "Types": [
                  "EDGE"
                ]
              },
              "Policy": ""
            }
          },
          "ApiGatewayResourceNotes": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "notes",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceNotesIdVar": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceNotes"
              },
              "PathPart": "{id}",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodNotesOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,DELETE,GET,POST'"
                    },
                    "ResponseTemplates": {
                      "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\".+\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceNotes"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodNotesIdVarOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET,PUT'"
                    },
                    "ResponseTemplates": {
                      "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\".+\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceNotesIdVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodNotesPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceNotes"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "AWS_IAM",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "CreateLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            }
          },
          "ApiGatewayMethodNotesGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceNotes"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "AWS_IAM",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "ListLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            }
          },
          "ApiGatewayMethodNotesIdVarPut": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "PUT",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceNotesIdVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "AWS_IAM",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "UpdateLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            }
          },
          "ApiGatewayMethodNotesIdVarGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceNotesIdVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "AWS_IAM",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            }
          },
          "ApiGatewayMethodNotesDelete": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "DELETE",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceNotes"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "AWS_IAM",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "DeleteLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            }
          },
          "ApiGatewayDeployment1593214794071": {
            "Type": "AWS::ApiGateway::Deployment",
            "Properties": {
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "StageName": "dev"
            },
            "DependsOn": [
              "ApiGatewayMethodNotesOptions",
              "ApiGatewayMethodNotesIdVarOptions",
              "ApiGatewayMethodNotesPost",
              "ApiGatewayMethodNotesGet",
              "ApiGatewayMethodNotesIdVarPut",
              "ApiGatewayMethodNotesIdVarGet",
              "ApiGatewayMethodNotesDelete"
            ]
          },
          "CreateLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "CreateLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "ListLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "ListLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "UpdateLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "UpdateLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "GetLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "DeleteLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "DeleteLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "WebsocketsApi": {
            "Type": "AWS::ApiGatewayV2::Api",
            "Properties": {
              "Name": "fwsl-websocket-api",
              "RouteSelectionExpression": "$request.body.action",
              "Description": "Serverless Websockets",
              "ProtocolType": "WEBSOCKET"
            }
          },
          "ConnectionManagerWebsocketsIntegration": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "WebsocketsApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":apigateway:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::GetAtt": [
                        "ConnectionManagerLambdaFunction",
                        "Arn"
                      ]
                    },
                    "/invocations"
                  ]
                ]
              }
            }
          },
          "DefaultMessageWebsocketsIntegration": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "WebsocketsApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":apigateway:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::GetAtt": [
                        "DefaultMessageLambdaFunction",
                        "Arn"
                      ]
                    },
                    "/invocations"
                  ]
                ]
              }
            }
          },
          "AskQuestionWebsocketsIntegration": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "WebsocketsApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":apigateway:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::GetAtt": [
                        "AskQuestionLambdaFunction",
                        "Arn"
                      ]
                    },
                    "/invocations"
                  ]
                ]
              }
            }
          },
          "SetAnswererWebsocketsIntegration": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "WebsocketsApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":apigateway:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::GetAtt": [
                        "SetAnswererLambdaFunction",
                        "Arn"
                      ]
                    },
                    "/invocations"
                  ]
                ]
              }
            }
          },
          "GetPotentialAnswerersWebsocketsIntegration": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "WebsocketsApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":apigateway:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::GetAtt": [
                        "GetPotentialAnswerersLambdaFunction",
                        "Arn"
                      ]
                    },
                    "/invocations"
                  ]
                ]
              }
            }
          },
          "CreateQuestionWebsocketsIntegration": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "WebsocketsApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":apigateway:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::GetAtt": [
                        "CreateQuestionLambdaFunction",
                        "Arn"
                      ]
                    },
                    "/invocations"
                  ]
                ]
              }
            }
          },
          "UpdateUserInfoWebsocketsIntegration": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "WebsocketsApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":apigateway:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::GetAtt": [
                        "UpdateUserInfoLambdaFunction",
                        "Arn"
                      ]
                    },
                    "/invocations"
                  ]
                ]
              }
            }
          },
          "ConnectionManagerLambdaPermissionWebsockets": {
            "Type": "AWS::Lambda::Permission",
            "DependsOn": [
              "WebsocketsApi",
              "ConnectionManagerLambdaFunction"
            ],
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "ConnectionManagerLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com"
            }
          },
          "DefaultMessageLambdaPermissionWebsockets": {
            "Type": "AWS::Lambda::Permission",
            "DependsOn": [
              "WebsocketsApi",
              "DefaultMessageLambdaFunction"
            ],
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "DefaultMessageLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com"
            }
          },
          "AskQuestionLambdaPermissionWebsockets": {
            "Type": "AWS::Lambda::Permission",
            "DependsOn": [
              "WebsocketsApi",
              "AskQuestionLambdaFunction"
            ],
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "AskQuestionLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com"
            }
          },
          "SetAnswererLambdaPermissionWebsockets": {
            "Type": "AWS::Lambda::Permission",
            "DependsOn": [
              "WebsocketsApi",
              "SetAnswererLambdaFunction"
            ],
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "SetAnswererLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com"
            }
          },
          "GetPotentialAnswerersLambdaPermissionWebsockets": {
            "Type": "AWS::Lambda::Permission",
            "DependsOn": [
              "WebsocketsApi",
              "GetPotentialAnswerersLambdaFunction"
            ],
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetPotentialAnswerersLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com"
            }
          },
          "CreateQuestionLambdaPermissionWebsockets": {
            "Type": "AWS::Lambda::Permission",
            "DependsOn": [
              "WebsocketsApi",
              "CreateQuestionLambdaFunction"
            ],
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "CreateQuestionLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com"
            }
          },
          "UpdateUserInfoLambdaPermissionWebsockets": {
            "Type": "AWS::Lambda::Permission",
            "DependsOn": [
              "WebsocketsApi",
              "UpdateUserInfoLambdaFunction"
            ],
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "UpdateUserInfoLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com"
            }
          },
          "SconnectWebsocketsRoute": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "WebsocketsApi"
              },
              "RouteKey": "$connect",
              "AuthorizationType": "NONE",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "ConnectionManagerWebsocketsIntegration"
                    }
                  ]
                ]
              }
            }
          },
          "SdisconnectWebsocketsRoute": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "WebsocketsApi"
              },
              "RouteKey": "$disconnect",
              "AuthorizationType": "NONE",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "ConnectionManagerWebsocketsIntegration"
                    }
                  ]
                ]
              }
            }
          },
          "SdefaultWebsocketsRoute": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "WebsocketsApi"
              },
              "RouteKey": "$default",
              "AuthorizationType": "NONE",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "DefaultMessageWebsocketsIntegration"
                    }
                  ]
                ]
              }
            }
          },
          "askQuestionWebsocketsRoute": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "WebsocketsApi"
              },
              "RouteKey": "askQuestion",
              "AuthorizationType": "NONE",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "AskQuestionWebsocketsIntegration"
                    }
                  ]
                ]
              }
            }
          },
          "setAnswererWebsocketsRoute": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "WebsocketsApi"
              },
              "RouteKey": "setAnswerer",
              "AuthorizationType": "NONE",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "SetAnswererWebsocketsIntegration"
                    }
                  ]
                ]
              }
            }
          },
          "getPotentialAnswerersWebsocketsRoute": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "WebsocketsApi"
              },
              "RouteKey": "getPotentialAnswerers",
              "AuthorizationType": "NONE",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "GetPotentialAnswerersWebsocketsIntegration"
                    }
                  ]
                ]
              }
            }
          },
          "createQuestionWebsocketsRoute": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "WebsocketsApi"
              },
              "RouteKey": "createQuestion",
              "AuthorizationType": "NONE",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "CreateQuestionWebsocketsIntegration"
                    }
                  ]
                ]
              }
            }
          },
          "updateUserInfoWebsocketsRoute": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "WebsocketsApi"
              },
              "RouteKey": "updateUserInfo",
              "AuthorizationType": "NONE",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "UpdateUserInfoWebsocketsIntegration"
                    }
                  ]
                ]
              }
            }
          },
          "WebsocketsDeploymentStage": {
            "Type": "AWS::ApiGatewayV2::Stage",
            "Properties": {
              "ApiId": {
                "Ref": "WebsocketsApi"
              },
              "StageName": "dev",
              "Description": "Serverless Websockets",
              "DeploymentId": {
                "Ref": "WebsocketsDeploymentwTUr5q9wwwX3Pb2ZoojvSwZ49bmTW8HpI1o3aI09ko"
              }
            }
          },
          "WebsocketsDeploymentwTUr5q9wwwX3Pb2ZoojvSwZ49bmTW8HpI1o3aI09ko": {
            "Type": "AWS::ApiGatewayV2::Deployment",
            "DependsOn": [
              "SconnectWebsocketsRoute",
              "SdisconnectWebsocketsRoute",
              "SdefaultWebsocketsRoute",
              "askQuestionWebsocketsRoute",
              "setAnswererWebsocketsRoute",
              "getPotentialAnswerersWebsocketsRoute",
              "createQuestionWebsocketsRoute",
              "updateUserInfoWebsocketsRoute"
            ],
            "Properties": {
              "ApiId": {
                "Ref": "WebsocketsApi"
              },
              "Description": "Serverless Websockets"
            }
          },
          "GatewayResponseDefault4XX": {
            "Type": "AWS::ApiGateway::GatewayResponse",
            "Properties": {
              "ResponseParameters": {
                "gatewayresponse.header.Access-Control-Allow-Origin": "'*'",
                "gatewayresponse.header.Access-Control-Allow-Headers": "'*'"
              },
              "ResponseType": "DEFAULT_4XX",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "GatewayResponseDefault5XX": {
            "Type": "AWS::ApiGateway::GatewayResponse",
            "Properties": {
              "ResponseParameters": {
                "gatewayresponse.header.Access-Control-Allow-Origin": "'*'",
                "gatewayresponse.header.Access-Control-Allow-Headers": "'*'"
              },
              "ResponseType": "DEFAULT_5XX",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            }
          },
          "ConnectionManagerLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "ConnectionManagerLambdaVersiongj8642mlQtv9kxWfSwO5X0pIyxXRmDDDR6AFob54V5o"
            }
          },
          "DefaultMessageLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "DefaultMessageLambdaVersionmLkrEnfTZuPirRgADFVwdK67IkWIRaUGIQpX9Hb22YI"
            }
          },
          "AskQuestionLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "AskQuestionLambdaVersionxRQWlt1MkIqBLCWjLSecG8e95GLjnxjeWyMSHNXDPQ"
            }
          },
          "SetAnswererLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "SetAnswererLambdaVersionnxc1HMiQfB8nfwx94DS6BoNct83nGOd05zBNDs9G9vo"
            }
          },
          "GetPotentialAnswerersLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetPotentialAnswerersLambdaVersionqqpzd9cK1RkuMpesT3EgLrOxV7RqVLCIlnvNRBWDDc"
            }
          },
          "CreateQuestionLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "CreateQuestionLambdaVersionW6d7mPBD3slxIxBnmnMBXYn9ZgOSKCsmFmLe10wiV0"
            }
          },
          "UpdateUserInfoLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "UpdateUserInfoLambdaVersionpJCFMVUGQzKSqhEgXCj8NmnCgQirdvDgGlIVEDraQM"
            }
          },
          "CreateLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "CreateLambdaVersionjHKRtfN4yFgwtwctT9hm3Lw2nyhXDbGdLKN1V852oAY"
            }
          },
          "ListLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "ListLambdaVersion0sUIjM32xHEdSHseEheBlezTWWblgjK1AUvnHBgyI"
            }
          },
          "UpdateLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "UpdateLambdaVersion478yuIzhT5nzyj1O7gBwnM98O2cB6H81u0cl9IlGc"
            }
          },
          "GetLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetLambdaVersionZxyuXnJDr6C8hMtAKbeMhqfbf8NbwjrUpslHBGmL1A"
            }
          },
          "DeleteLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "DeleteLambdaVersionA6Ij2TWUpaT6P0gUUJaMgMJa4bcOZpqubKvIuPmuM"
            }
          },
          "ServiceEndpoint": {
            "Description": "URL of the service endpoint",
            "Value": {
              "Fn::Join": [
                "",
                [
                  "https://",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  ".execute-api.",
                  {
                    "Ref": "AWS::Region"
                  },
                  ".",
                  {
                    "Ref": "AWS::URLSuffix"
                  },
                  "/dev"
                ]
              ]
            }
          },
          "ServiceEndpointWebsocket": {
            "Description": "URL of the service endpoint",
            "Value": {
              "Fn::Join": [
                "",
                [
                  "wss://",
                  {
                    "Ref": "WebsocketsApi"
                  },
                  ".execute-api.",
                  {
                    "Ref": "AWS::Region"
                  },
                  ".",
                  {
                    "Ref": "AWS::URLSuffix"
                  },
                  "/dev"
                ]
              ]
            }
          }
        }
      },
      "coreCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }
            }
          },
          "ServerlessDeploymentBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
              "Bucket": {
                "Ref": "ServerlessDeploymentBucket"
              },
              "PolicyDocument": {
                "Statement": [
                  {
                    "Action": "s3:*",
                    "Effect": "Deny",
                    "Principal": "*",
                    "Resource": [
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            },
                            "/*"
                          ]
                        ]
                      }
                    ],
                    "Condition": {
                      "Bool": {
                        "aws:SecureTransport": false
                      }
                    }
                  }
                ]
              }
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            }
          }
        }
      },
      "vpc": {}
    },
    "pluginsData": {},
    "functions": {
      "connectionManager": {
        "handler": "websocket.connection_manager",
        "events": [
          {
            "websocket": {
              "route": "$connect"
            }
          },
          {
            "websocket": {
              "route": "$disconnect"
            }
          }
        ],
        "name": "trvy-python-websocket-dev-connectionManager",
        "package": {
          "artifact": "/Users/william.fuchs/Documents/fwsl-questions-api/.serverless/connectionManager.zip"
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "python3.7",
        "vpc": {},
        "versionLogicalId": "ConnectionManagerLambdaVersiongj8642mlQtv9kxWfSwO5X0pIyxXRmDDDR6AFob54V5o"
      },
      "defaultMessage": {
        "handler": "websocket.default_message",
        "events": [
          {
            "websocket": {
              "route": "$default"
            }
          }
        ],
        "name": "trvy-python-websocket-dev-defaultMessage",
        "package": {
          "artifact": "/Users/william.fuchs/Documents/fwsl-questions-api/.serverless/defaultMessage.zip"
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "python3.7",
        "vpc": {},
        "versionLogicalId": "DefaultMessageLambdaVersionmLkrEnfTZuPirRgADFVwdK67IkWIRaUGIQpX9Hb22YI"
      },
      "askQuestion": {
        "handler": "websocket.send_question_to_room",
        "events": [
          {
            "websocket": {
              "route": "askQuestion"
            }
          }
        ],
        "name": "trvy-python-websocket-dev-askQuestion",
        "package": {
          "artifact": "/Users/william.fuchs/Documents/fwsl-questions-api/.serverless/askQuestion.zip"
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "python3.7",
        "vpc": {},
        "versionLogicalId": "AskQuestionLambdaVersionxRQWlt1MkIqBLCWjLSecG8e95GLjnxjeWyMSHNXDPQ"
      },
      "setAnswerer": {
        "handler": "websocket.set_answerer",
        "events": [
          {
            "websocket": {
              "route": "setAnswerer"
            }
          }
        ],
        "name": "trvy-python-websocket-dev-setAnswerer",
        "package": {
          "artifact": "/Users/william.fuchs/Documents/fwsl-questions-api/.serverless/setAnswerer.zip"
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "python3.7",
        "vpc": {},
        "versionLogicalId": "SetAnswererLambdaVersionnxc1HMiQfB8nfwx94DS6BoNct83nGOd05zBNDs9G9vo"
      },
      "getPotentialAnswerers": {
        "handler": "websocket.send_next_answerers",
        "events": [
          {
            "websocket": {
              "route": "getPotentialAnswerers"
            }
          }
        ],
        "name": "trvy-python-websocket-dev-getPotentialAnswerers",
        "package": {
          "artifact": "/Users/william.fuchs/Documents/fwsl-questions-api/.serverless/getPotentialAnswerers.zip"
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "python3.7",
        "vpc": {},
        "versionLogicalId": "GetPotentialAnswerersLambdaVersionqqpzd9cK1RkuMpesT3EgLrOxV7RqVLCIlnvNRBWDDc"
      },
      "createQuestion": {
        "handler": "websocket.store_question",
        "events": [
          {
            "websocket": {
              "route": "createQuestion"
            }
          }
        ],
        "name": "trvy-python-websocket-dev-createQuestion",
        "package": {
          "artifact": "/Users/william.fuchs/Documents/fwsl-questions-api/.serverless/createQuestion.zip"
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "python3.7",
        "vpc": {},
        "versionLogicalId": "CreateQuestionLambdaVersionW6d7mPBD3slxIxBnmnMBXYn9ZgOSKCsmFmLe10wiV0"
      },
      "updateUserInfo": {
        "handler": "websocket.update_user",
        "events": [
          {
            "websocket": {
              "route": "updateUserInfo"
            }
          }
        ],
        "name": "trvy-python-websocket-dev-updateUserInfo",
        "package": {
          "artifact": "/Users/william.fuchs/Documents/fwsl-questions-api/.serverless/updateUserInfo.zip"
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "python3.7",
        "vpc": {},
        "versionLogicalId": "UpdateUserInfoLambdaVersionpJCFMVUGQzKSqhEgXCj8NmnCgQirdvDgGlIVEDraQM"
      },
      "create": {
        "handler": "create.main",
        "events": [
          {
            "http": {
              "path": "notes",
              "method": "post",
              "cors": {
                "origins": [
                  "*"
                ],
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "POST"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "authorizer": {
                "type": "AWS_IAM",
                "managedExternally": false,
                "identitySource": "method.request.header.Authorization"
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "trvy-python-websocket-dev-create",
        "package": {
          "artifact": "/Users/william.fuchs/Documents/fwsl-questions-api/.serverless/create.zip"
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "python3.7",
        "vpc": {},
        "versionLogicalId": "CreateLambdaVersionjHKRtfN4yFgwtwctT9hm3Lw2nyhXDbGdLKN1V852oAY"
      },
      "list": {
        "handler": "list.main",
        "events": [
          {
            "http": {
              "path": "notes",
              "method": "get",
              "cors": {
                "origins": [
                  "*"
                ],
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "authorizer": {
                "type": "AWS_IAM",
                "managedExternally": false,
                "identitySource": "method.request.header.Authorization"
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "trvy-python-websocket-dev-list",
        "package": {
          "artifact": "/Users/william.fuchs/Documents/fwsl-questions-api/.serverless/list.zip"
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "python3.7",
        "vpc": {},
        "versionLogicalId": "ListLambdaVersion0sUIjM32xHEdSHseEheBlezTWWblgjK1AUvnHBgyI"
      },
      "update": {
        "handler": "update.main",
        "events": [
          {
            "http": {
              "path": "notes/{id}",
              "method": "put",
              "cors": {
                "origins": [
                  "*"
                ],
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "PUT"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "authorizer": {
                "type": "AWS_IAM",
                "managedExternally": false,
                "identitySource": "method.request.header.Authorization"
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "trvy-python-websocket-dev-update",
        "package": {
          "artifact": "/Users/william.fuchs/Documents/fwsl-questions-api/.serverless/update.zip"
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "python3.7",
        "vpc": {},
        "versionLogicalId": "UpdateLambdaVersion478yuIzhT5nzyj1O7gBwnM98O2cB6H81u0cl9IlGc"
      },
      "get": {
        "handler": "get.main",
        "events": [
          {
            "http": {
              "path": "notes/{id}",
              "method": "get",
              "cors": {
                "origins": [
                  "*"
                ],
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "authorizer": {
                "type": "AWS_IAM",
                "managedExternally": false,
                "identitySource": "method.request.header.Authorization"
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "trvy-python-websocket-dev-get",
        "package": {
          "artifact": "/Users/william.fuchs/Documents/fwsl-questions-api/.serverless/get.zip"
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "python3.7",
        "vpc": {},
        "versionLogicalId": "GetLambdaVersionZxyuXnJDr6C8hMtAKbeMhqfbf8NbwjrUpslHBGmL1A"
      },
      "delete": {
        "handler": "delete.main",
        "events": [
          {
            "http": {
              "path": "notes",
              "method": "delete",
              "cors": {
                "origins": [
                  "*"
                ],
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "DELETE"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "authorizer": {
                "type": "AWS_IAM",
                "managedExternally": false,
                "identitySource": "method.request.header.Authorization"
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "trvy-python-websocket-dev-delete",
        "package": {
          "artifact": "/Users/william.fuchs/Documents/fwsl-questions-api/.serverless/delete.zip"
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "python3.7",
        "vpc": {},
        "versionLogicalId": "DeleteLambdaVersionA6Ij2TWUpaT6P0gUUJaMgMJa4bcOZpqubKvIuPmuM"
      }
    },
    "resources": {
      "Resources": {
        "GatewayResponseDefault4XX": {
          "Type": "AWS::ApiGateway::GatewayResponse",
          "Properties": {
            "ResponseParameters": {
              "gatewayresponse.header.Access-Control-Allow-Origin": "'*'",
              "gatewayresponse.header.Access-Control-Allow-Headers": "'*'"
            },
            "ResponseType": "DEFAULT_4XX",
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            }
          }
        },
        "GatewayResponseDefault5XX": {
          "Type": "AWS::ApiGateway::GatewayResponse",
          "Properties": {
            "ResponseParameters": {
              "gatewayresponse.header.Access-Control-Allow-Origin": "'*'",
              "gatewayresponse.header.Access-Control-Allow-Headers": "'*'"
            },
            "ResponseType": "DEFAULT_5XX",
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            }
          }
        }
      },
      "Outputs": {}
    },
    "serviceFilename": "serverless.yml",
    "layers": {},
    "isDashboardMonitoringPreconfigured": false
  },
  "package": {
    "individually": true,
    "artifactDirectoryName": "serverless/trvy-python-websocket/dev/1593214795399-2020-06-26T23:39:55.399Z",
    "artifact": ""
  }
}