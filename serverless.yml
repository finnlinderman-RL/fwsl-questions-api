service: notes-python

# Create an optimized package for our functions
package:
  individually: true

provider:
  name: aws
  runtime: python3.7
  stage: dev
  region: us-east-1

  environment:
    tableName: notes-python-example-database

  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:us-east-1:*:*"

functions:
  create:
    handler: create.main
    events:
      - http:
          path: notes
          method: post
          cors: true
          authorizer: aws_iam
  list:
    handler: list.main
    events:
      - http:
          path: notes
          method: get
          cors: true
          authorizer: aws_iam
  update: 
    handler: update.main
    events:
      - http: 
          path: notes/{id}
          method: put
          cors: true
          authorizer: aws_iam
  get: 
    handler: get.main
    events:
      - http: 
          path: notes/{id}
          method: get
          cors: true
          authorizer: aws_iam
  delete:
    handler: delete.main
    events:
      - http:
          path: notes
          method: delete
          cors: true
          authorizer: aws_iam

# Create our resources with separate CloudFormation templates
resources:
  # API Gateway Errors
  - ${file(resources/api-gateway-errors.yml)}